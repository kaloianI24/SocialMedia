@model SearchResultsViewModel
@using SocialMedia.Areas.Identity.Data
@using SocialMedia.Web.Models
@using SocialMedia.Web.Models.Post
@inject Microsoft.AspNetCore.Identity.UserManager<SocialMediaUser> UserManager

@{
    ViewData["Title"] = "Search Results";
    var savedPosts = (List<string>)this.ViewData["SavedPosts"] ?? new List<string>();
    var currentUser = await UserManager.GetUserAsync(User);
}

<div class="search-page">
    <!-- Search Header -->
    <div class="search-header">
        <div class="container">
            <div class="search-bar-container">
                <a href="/" class="logo">SocialMedia</a>
                <form asp-action="Search" asp-controller="Home" method="get" class="search-form">
                    <div class="search-input-group">
                        <i class="fas fa-search search-icon"></i>
                        <input type="text" name="query" class="search-input" value="@Model.Query" placeholder="Search for users, posts, or tags...">
                        <button type="submit" class="search-btn">Search</button>
                    </div>
                </form>
              
            </div>
        </div>
    </div>


    <div class="search-main-content">
        <div class="container">
            <h1 class="search-title">Results for "@Model.Query"</h1>


            <div class="search-tabs">
                <button class="tab-btn active" data-target="users-tab">Users (@Model.Users.Count)</button>
                <button class="tab-btn" data-target="posts-tab">Posts (@Model.Posts.Count)</button>
            </div>


            <div id="users-tab" class="tab-content active">
                @if (Model.Users.Any())
                {
                    <div class="users-grid">
                        @foreach (var user in Model.Users)
                        {
                            <div class="user-card @(user.IsFriend ? "friend" : "")">
                                <div class="user-avatar-container">
                                    <a href="/Post/MyPage?userId=@user.Id">
                                        <img src="@(string.IsNullOrEmpty(user.ProfilePictureUrl) ? "/images/default-avatar.png" : user.ProfilePictureUrl)"
                                             class="user-avatar" alt="@user.UserName">
                                        @if (user.IsFriend)
                                        {
                                            <span class="friend-badge">Friend</span>
                                        }
                                    </a>
                                </div>
                                <div class="user-info">
                                    <h3 class="username">@user.UserName</h3>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-results">
                        <i class="fas fa-user-slash"></i>
                        <p>No users found matching '@Model.Query'</p>
                    </div>
                }
            </div>


            <div id="posts-tab" class="tab-content">
                @if (Model.Posts.Any())
                {
                    <div class="posts-container">
                        @foreach (var post in Model.Posts)
                        {
                            <div class="post-item">
                                <div class="post-header">
                                    <a href="/Post/MyPage?userId=@post.CreatedById" class="post-user">
                                        <img src="@(string.IsNullOrEmpty(post.ProfilePictureUrl) ? "/images/default-avatar.png" : post.ProfilePictureUrl)"
                                             class="post-avatar" alt="@post.UserName">
                                        <span class="post-username">@post.UserName</span>
                                    </a>
                                    <div class="post-options">
                                        @if (savedPosts.Contains(post.Id))
                                        {
                                            <button class="post-save saved" data-post-id="@post.Id">
                                                <i class="fas fa-bookmark"></i>
                                            </button>
                                        }
                                        else
                                        {
                                            <button class="post-save" data-post-id="@post.Id">
                                                <i class="far fa-bookmark"></i>
                                            </button>
                                        }
                                    </div>
                                </div>

                                <div class="post-media">
                                    @if (post.AttachmentUrls.Any())
                                    {
                                        <div class="post-image-container">
                                            @if (post.AttachmentUrls.Count == 1)
                                            {
                                                <img src="@post.AttachmentUrls.First()" class="post-image" alt="Post image">
                                            }
                                            else
                                            {
                                                <div class="post-carousel">
                                                    @foreach (var attachmentUrl in post.AttachmentUrls)
                                                    {
                                                        <img src="@attachmentUrl" class="post-image" alt="Post image">
                                                    }
                                                    <div class="carousel-controls">
                                                        <button class="carousel-prev"><i class="fas fa-chevron-left"></i></button>
                                                        <button class="carousel-next"><i class="fas fa-chevron-right"></i></button>
                                                    </div>
                                                    <div class="carousel-indicators">
                                                        @for (int index = 0; index < post.AttachmentUrls.Count; index++)
                                                        {
                                                            <span class="indicator @(index == 0 ? "active" : "")"></span>
                                                        }
                                                    </div>
                                                </div>
                                            }
                                        </div>
                                    }
                                </div>

                                <div class="post-content">
                                    <div class="post-actions">
                                        <button class="post-action like-btn" data-post-id="@post.Id">
                                            <i class="far fa-heart"></i>
                                        </button>
                                        <button class="post-action comment-btn" data-post-id="@post.Id">
                                            <i class="far fa-comment"></i>
                                        </button>
                                        <button class="post-action share-btn" data-post-id="@post.Id">
                                            <i class="far fa-share-square"></i>
                                        </button>
                                    </div>

                                    <div class="post-caption">
                                        <span class="caption-username">@post.UserName</span>
                                        <span class="caption-text">
                                            @if (post.Description.Length > 150)
                                            {
                                                <span class="short-text">@post.Description.Substring(0, 150)...</span>
                                                <span class="full-text" style="display:none;">@post.Description</span>
                                                <button class="show-more">more</button>
                                            }
                                            else
                                            {
                                                @post.Description
                                            }
                                        </span>
                                    </div>

                                    <div class="post-tags">
                                        @foreach (var tag in post.Tags)
                                        {
                                            <a href="@Url.Action("Search", "Home", new { query = tag })" class="post-tag">#@tag</a>
                                        }
                                    </div>

                                    <div class="post-tagged-users">
                                        @for (int tagIndex = 0; tagIndex < post.TaggedUsersId.Count; tagIndex++)
                                        {
                                            <a href="/Post/MyPage?userId=@post.TaggedUsersId.ElementAt(tagIndex)" class="tagged-user">
                                                @@@post.TaggedUsersUserNames.ElementAt(tagIndex)
                                            </a>
                                        }
                                    </div>

                                    <div class="post-time">
                                        @post.CreatedOn.ToString("MMMM dd, yyyy")
                                    </div>
                                </div>
                            </div>
                        }
                    </div>
                }
                else
                {
                    <div class="no-results">
                        <i class="fas fa-image"></i>
                        <p>No posts found matching '@Model.Query'</p>
                    </div>
                }
            </div>
        </div>
    </div>
</div>

<style>
    :root {
        --primary-color: #1877f2;
        --secondary-color: #42b72a;
        --text-color: #050505;
        --text-secondary: #65676b;
        --border-color: #ddd;
        --bg-color: #f0f2f5;
        --card-bg: #ffffff;
    }

    * {
        box-sizing: border-box;
        margin: 0;
        padding: 0;
    }

    body {
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        background-color: var(--bg-color);
        color: var(--text-color);
    }

    .container {
        max-width: 600px;
        margin: 0 auto;
        padding: 0 15px;
    }

    a {
        text-decoration: none;
        color: inherit;
    }

    img {
        max-width: 100%;
        height: auto;
    }

    /* Search Header */
    .search-header {
        background-color: var(--card-bg);
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        position: sticky;
        top: 0;
        z-index: 100;
        padding: 10px 0;
        text-align: center;
    }

    .search-bar-container {
        display: flex;
        align-items: center;
        justify-content: space-between;
        gap: 20px;
    }

    .logo {
        font-size: 24px;
        font-weight: bold;
        color: var(--primary-color);
    }

    .search-form {
        flex-grow: 1;
        max-width: 600px;
        margin: 0 auto;
    }

    .search-input-group {
        display: flex;
        align-items: center;
        background-color: #f0f2f5;
        border-radius: 50px;
        padding: 8px 15px;
    }

    .search-icon {
        color: var(--text-secondary);
        margin-right: 10px;
    }

    .search-input {
        flex-grow: 1;
        border: none;
        background: transparent;
        outline: none;
        font-size: 16px;
    }

    .search-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 8px 20px;
        font-weight: bold;
        cursor: pointer;
        margin-left: 10px;
    }

    .back-btn {
        background-color: var(--primary-color);
        color: white;
        border: none;
        border-radius: 50px;
        padding: 8px 20px;
        font-weight: bold;
        cursor: pointer;
        display: inline-flex;
        align-items: center;
        gap: 8px;
    }

    .user-link {
        display: flex;
        align-items: center;
    }

    .user-avatar {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        object-fit: cover;
    }


    .search-main-content {
        padding: 30px 0;
        text-align: center;
    }

    .search-title {
        font-size: 28px;
        margin-bottom: 30px;
        text-align: center;
    }


    .search-tabs {
        display: flex;
        border-bottom: 1px solid var(--border-color);
        margin-bottom: 20px;
        justify-content: center;
    }

    .tab-btn {
        padding: 12px 20px;
        background: none;
        border: none;
        font-size: 16px;
        font-weight: 600;
        color: var(--text-secondary);
        cursor: pointer;
        position: relative;
    }

        .tab-btn.active {
            color: var(--primary-color);
        }

            .tab-btn.active::after {
                content: '';
                position: absolute;
                bottom: -1px;
                left: 0;
                width: 100%;
                height: 3px;
                background-color: var(--primary-color);
            }

    .tab-content {
        display: none;
    }

        .tab-content.active {
            display: block;
        }

    .users-grid {
        display: grid;
        grid-template-columns: repeat(auto-fill, minmax(280px, 1fr));
        gap: 20px;
        justify-content: center;
        max-width: 600px;
        margin: 0 auto;
    }

    .user-card {
        background-color: var(--card-bg);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        transition: transform 0.2s;
        display: flex;
        padding: 20px;
    }

        .user-card:hover {
            transform: translateY(-5px);
            box-shadow: 0 5px 15px rgba(0, 0, 0, 0.1);
        }

        .user-card.friend {
            border-left: 4px solid var(--secondary-color);
        }

    .user-avatar-container {
        position: relative;
        margin-right: 15px;
    }

    .user-avatar {
        width: 80px;
        height: 80px;
        border-radius: 50%;
        object-fit: cover;
    }

    .friend-badge {
        position: absolute;
        bottom: 0;
        right: 0;
        background-color: var(--secondary-color);
        color: white;
        font-size: 10px;
        padding: 2px 5px;
        border-radius: 10px;
    }

    .user-info {
        flex-grow: 1;
        text-align: left;
    }

    .username {
        font-size: 18px;
        margin-bottom: 5px;
    }

    /* Posts Tab */
    .posts-container {
        display: flex;
        flex-direction: column;
        gap: 20px;
        max-width: 600px;
        margin: 0 auto;
    }

    .post-item {
        width: 100%;
        background-color: var(--card-bg);
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
        text-align: left;
    }

    .post-header {
        display: flex;
        align-items: center;
        justify-content: space-between;
        padding: 12px 15px;
        border-bottom: 1px solid var(--border-color);
    }

    .post-user {
        display: flex;
        align-items: center;
    }

    .post-avatar {
        width: 32px;
        height: 32px;
        border-radius: 50%;
        object-fit: cover;
        margin-right: 10px;
    }

    .post-username {
        font-weight: 600;
    }

    .post-options {
        display: flex;
        align-items: center;
    }

    .post-save {
        background: none;
        border: none;
        font-size: 18px;
        color: var(--text-secondary);
        cursor: pointer;
    }

        .post-save.saved {
            color: var(--primary-color);
        }

    .post-media {
        position: relative;
    }

    .post-image-container {
        width: 100%;
    }

    .post-image {
        width: 100%;
        height: auto;
        display: block;
    }

    .post-carousel {
        position: relative;
        overflow: hidden;
    }

        .post-carousel .post-image {
            display: none;
        }

            .post-carousel .post-image:first-child {
                display: block;
            }

    .carousel-controls {
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        display: flex;
        justify-content: space-between;
        align-items: center;
        pointer-events: none;
    }

    .carousel-prev,
    .carousel-next {
        pointer-events: auto;
        background-color: rgba(255, 255, 255, 0.7);
        border: none;
        width: 30px;
        height: 30px;
        border-radius: 50%;
        display: flex;
        align-items: center;
        justify-content: center;
        cursor: pointer;
        margin: 0 10px;
    }

    .carousel-indicators {
        position: absolute;
        bottom: 10px;
        left: 0;
        right: 0;
        display: flex;
        justify-content: center;
        gap: 5px;
    }

    .indicator {
        width: 6px;
        height: 6px;
        border-radius: 50%;
        background-color: rgba(255, 255, 255, 0.5);
    }

        .indicator.active {
            background-color: white;
        }

    .post-content {
        padding: 12px 15px;
    }

    .post-actions {
        display: flex;
        gap: 15px;
        margin-bottom: 10px;
        justify-content: flex-start;
    }

    .post-action {
        background: none;
        border: none;
        font-size: 24px;
        cursor: pointer;
        color: var(--text-color);
    }

    .post-caption {
        margin-bottom: 8px;
        line-height: 1.4;
    }

    .caption-username {
        font-weight: 600;
        margin-right: 5px;
    }

    .show-more {
        background: none;
        border: none;
        color: var(--text-secondary);
        padding: 0;
        cursor: pointer;
    }

    .post-tags {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 8px;
    }

    .post-tag {
        color: var(--primary-color);
    }

    .post-tagged-users {
        display: flex;
        flex-wrap: wrap;
        gap: 5px;
        margin-bottom: 8px;
    }

    .tagged-user {
        color: var(--primary-color);
    }

    .post-time {
        font-size: 12px;
        color: var(--text-secondary);
        text-transform: uppercase;
    }

    /* No Results */
    .no-results {
        text-align: center;
        padding: 50px 20px;
        color: var(--text-secondary);
    }

        .no-results i {
            font-size: 50px;
            margin-bottom: 20px;
            color: #ddd;
        }

   
    
    {
        width: 100%;
        padding: 0 10px;
    }

    .search-bar-container {
        flex-wrap: wrap;
    }

    .logo, .back-btn {
        font-size: 20px;
    }

    .search-form {
        order: 3;
        width: 100%;
        margin-top: 10px;
    }

    .users-grid {
        grid-template-columns: 1fr;
    }

    }
</style>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // Tab switching
        const tabBtns = document.querySelectorAll('.tab-btn');
        tabBtns.forEach(btn => {
            btn.addEventListener('click', function() {
                // Remove active class from all buttons and tabs
                document.querySelectorAll('.tab-btn').forEach(b => b.classList.remove('active'));
                document.querySelectorAll('.tab-content').forEach(t => t.classList.remove('active'));

                // Add active class to clicked button and corresponding tab
                this.classList.add('active');
                const targetTab = document.getElementById(this.dataset.target);
                targetTab.classList.add('active');
            });
        });

        // Post carousel functionality
        document.querySelectorAll('.post-carousel').forEach(carousel => {
            const images = carousel.querySelectorAll('.post-image');
            const prevBtn = carousel.querySelector('.carousel-prev');
            const nextBtn = carousel.querySelector('.carousel-next');
            const indicators = carousel.querySelectorAll('.indicator');

            let currentIndex = 0;

            function showImage(index) {
                images.forEach((img, i) => {
                    img.style.display = i === index ? 'block' : 'none';
                });

                indicators.forEach((indicator, i) => {
                    indicator.classList.toggle('active', i === index);
                });
            }

            if (prevBtn) {
                prevBtn.addEventListener('click', () => {
                    currentIndex = (currentIndex - 1 + images.length) % images.length;
                    showImage(currentIndex);
                });
            }

            if (nextBtn) {
                nextBtn.addEventListener('click', () => {
                    currentIndex = (currentIndex + 1) % images.length;
                    showImage(currentIndex);
                });
            }

            indicators.forEach((indicator, index) => {
                indicator.addEventListener('click', () => {
                    currentIndex = index;
                    showImage(currentIndex);
                });
            });
        });

        // Show more/less for captions
        document.querySelectorAll('.show-more').forEach(btn => {
            btn.addEventListener('click', function() {
                const caption = this.parentElement;
                const shortText = caption.querySelector('.short-text');
                const fullText = caption.querySelector('.full-text');

                if (fullText.style.display === 'none') {
                    fullText.style.display = 'inline';
                    shortText.style.display = 'none';
                    this.textContent = 'less';
                } else {
                    fullText.style.display = 'none';
                    shortText.style.display = 'inline';
                    this.textContent = 'more';
                }
            });
        });

        // Tag click handler
        document.querySelectorAll('.post-tag').forEach(tag => {
            tag.addEventListener('click', function(e) {
                e.preventDefault();
                const tagText = this.textContent.substring(1); // Remove #
                window.location.href = `@Url.Action("Search", "Home")?query=${encodeURIComponent(tagText)}`;
            });
        });

        // Add anti-forgery token to the document
        const antiForgeryToken = document.createElement('input');
        antiForgeryToken.type = 'hidden';
        antiForgeryToken.name = '__RequestVerificationToken';
        antiForgeryToken.value = '@Html.AntiForgeryToken()';
        document.body.appendChild(antiForgeryToken);

        // Post save/unsave
        document.querySelectorAll('.post-save').forEach(btn => {
            btn.addEventListener('click', function() {
                const postId = this.dataset.postId;
                const isSaved = this.classList.contains('saved');

                fetch(`/Post/${isSaved ? 'Unsave' : 'Save'}Post`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ postId: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.classList.toggle('saved');
                        this.innerHTML = isSaved ? '<i class="far fa-bookmark"></i>' : '<i class="fas fa-bookmark"></i>';
                    }
                });
            });
        });

        // Post like/unlike
        document.querySelectorAll('.like-btn').forEach(btn => {
            btn.addEventListener('click', function() {
                const postId = this.dataset.postId;
                const isLiked = this.classList.contains('liked');

                fetch(`/Post/${isLiked ? 'Unlike' : 'Like'}Post`, {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    },
                    body: JSON.stringify({ postId: postId })
                })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        this.classList.toggle('liked');
                        this.innerHTML = isLiked ? '<i class="far fa-heart"></i>' : '<i class="fas fa-heart"></i>';
                    }
                });
            });
        });
    });
     
</script>