@using SocialMedia.Areas.Identity.Data
@using SocialMedia.Data.Models
@using Microsoft.AspNetCore.Identity
@using SocialMedia.Service.Models
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    List<string> savedPostsIds = (List<string>)ViewData["SavedPostsId"];
    List<UserPostReaction> reactions = (List<UserPostReaction>)ViewData["PostsReactions"];
    SocialMediaUser currentUser = (SocialMediaUser)ViewData["CurrentUser"];
}

@model List<SocialMedia.Web.Models.Post.TaggedPostWebModel>
<div class="main-content2">
    @if ((bool)ViewData["IsAccountPrivate"] && !(bool)ViewData["AreFriends"] && !(bool)ViewData["IsOwner"])
    {
        <h3>This account is private so you cannot see the posts.</h3>
    }
    else
    {
        @if (Model.Count == 0)
        {
            <h3>You don't have posts</h3>
        }
        else
        {        
            @foreach (var post in Model.OrderByDescending(p => p.CreatedOn))
            {
                {
                    <div class="post" data-post-id="@post.Id">
                        <div class="post-header">
                            <a href="/Post/MyPage?userId=@post.CreatedById">
                                <img src="@post.ProfilePictureUrl.Replace("http://", "https://")" alt="Profile Picture" class="profile-pic">
                            </a>
                            <div class="post-info">
                                <span class="username">@post.UserName</span>
                                <span class="location">@post.CreatedOn.ToString("MM/dd/yyyy")</span> <span class="location"></span>
                            </div>
                            @if ((bool)ViewData["IsOwner"] || (bool)ViewData["IsAdmin"])
                            {
                                <button type="button" class="btn-delete-post">Remove post</button>
                                <button class="btn-update-post"
                                onclick="window.location.href='/Post/Update?postId=@post.Id'">
                                    Update post
                                </button>
                            }
                        </div>
                        <div class="carousel">
                            <div class="carousel-images">
                                @foreach (var photo in post.AttachmentUrls)
                                {
                                    <img src=@photo.Replace("http://", "https://") alt="Post Image" class="post-image">
                                }
                            </div>
                            <button type="button" button class="carousel-arrow left-arrow">&lt;</button>
                            <button type="button" button class="carousel-arrow right-arrow">&gt;</button>
                            <div class="carousel-indicators">
                                <span class="dot active"></span>
                                @for (int i = 0; i < post.AttachmentUrls.Count - 1; i++)
                                {
                                    <span class="dot"></span>
                                }
                            </div>
                            <div class="image-counter">1 / @post.AttachmentUrls.Count</div>
                        </div>


                        <div class="post-actions">
                            <div class="post-likes">
                                <div class="likes-count">
                                    @{
                                        int likes = reactions.Count(reaction => reaction.Post.Id == post.Id);
										bool isLikedByCurrentUser = reactions.Any(reaction => reaction.Post.Id == post.Id && reaction.User.Id == currentUser.Id);
                                    }
									@if (isLikedByCurrentUser)
									{
										<img src="@Url.Content("~/images/heart.png")"
											 class="reaction-heart"
											 data-liked="true"
											 data-post-id="@post.Id" />
									}
									else
									{
                                        <img src="@Url.Content("~/images/heart.svg")"
                                        class="reaction-heart"
                                        data-liked="false"
                                        data-post-id="@post.Id" />
                                    }
                                    <div class="count-likes-number">@likes</div>

                                    <img src="@Url.Content("~/images/comment.svg")" class="comment-image">

                                    <div class="count-comment-number" data-post-id="@post.Id">0</div>
                                    <div class="details-posted-comment" data-post-id="@post.Id"></div>
                                    <div class="comment-input-field">
                                        <textarea class="form-control" rows="1" placeholder="Add a comment..." data-post-id="@post.Id"></textarea>
                                    </div>
                                    <div class="comment-button-holder d-none d-flex justify-content-end">
                                        <button class="btn btn-primary fw-bold comment-submit-button" data-post-id="@post.Id">Post</button>
                                    </div>


                                    @if (savedPostsIds is not null && savedPostsIds.Contains(post.Id))
                                    {
                                        <button type="button" class="btn-unsave-post saved" data-post-id="@post.Id">
                                            <img src="~/images/savedPost.png" class="save-image">
                                        </button>
                                    }
                                    else
                                    {
                                        <button type="button" class="btn-save-post" data-post-id="@post.Id">
                                            <img src="~/images/unsavedPost.png" class="save-image">
                                        </button>
                                    }
                                </div>
                            </div>
                        </div>


                        <div class="post-caption">
                            <span class="username">@post.UserName</span>
                            <p class="post-description">
                                @string.Join(" ", @post.Description.Split(" ").Take(10))
                                <span class="post-description-hidden-text">
                                    @string.Join(" ", @post.Description.Split(" ").Skip(10))
                                </span>
                                @if (post.Description.Split(" ").Length > 10)
                                {
                                    <button type="button" class="toggle-btn">Read more</button>
                                }
                            </p>
                            <div class="tags">
                                @foreach (var tag in @post.Tags)
                                {
                                    <span>#@tag</span>
                                }
                            </div>

                            <div class="taggedUsers">
                                @for (int i = 0; i < post.TaggedUsersId.Count; i++)
                                {
                                    <a class="links" href="/Post/MyPage?userId=@post.TaggedUsersId.ElementAt(i)">
                                        <span class="taggedUsers-text">@('@')@post.TaggedUsersUserNames.ElementAt(i)</span>
                                    </a>
                                }
                            </div>
                        </div>
                    </div>
                }
            }
        }
    }
</div>

@section Scripts {
    <script src="~/js/imagesFunctions.js"></script>

<script>

		document.addEventListener("click", function (event) {
		if (event.target.classList.contains("reaction-heart")) {
			let image = event.target;
			let liked = image.getAttribute("data-liked") === "true";
			let counter = image.parentElement.querySelector(".count-likes-number");
			let postId = image.getAttribute("data-post-id");

			if (liked) {
                fetch('/Post/Unlike?postId=' + postId, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                .then((res) => {
                    if (res.ok) {
                        image.src = "/images/heart.svg";
                        counter.textContent = parseInt(counter.textContent) - 1;
                        image.setAttribute("data-liked", "false");
                    } else {
                        alert('Failed to unlike the post.');
                    }
                })
                .catch((error) => console.error(error));
			} else {
                fetch('/Post/Like?postId=' + postId, {
                    method: 'POST',
                    headers: {
                        "Content-Type": "application/json"
                    }
                })
                .then((res) => {
                    if (res.ok) {
                        image.src = "/images/heart.png";
                        counter.textContent = Math.max(0, parseInt(counter.textContent) + 1);
                        image.setAttribute("data-liked", "true");
                    } else {
                        alert('Failed to like the post.');
                    }
                })
                .catch((error) => console.error(error));
			}
		}
	});
</script>

<script>
      <script>
    function postComment() {
      const input = document.getElementById("comment-input");
      const text = input.value.trim();
      if (text === "") return;

      const commentBox = document.createElement("div");
      commentBox.className = "comment";

      const username = "User";
      const time = new Date().toLocaleString();

      commentBox.innerHTML = `
        <div class="username">${username}</div>
        <div class="timestamp">${time}</div>
        <div class="text">${text}</div>
      `;

      document.getElementById("comments-container").prepend(commentBox);
      input.value = "";
    }
</script>

<script>
    const autoResizeTextarea = (textarea) => {
            textarea.style.height = "auto";
            textarea.style.height = `${Math.min(textarea.scrollHeight, 150)}px`;
    };

    const textarea = document.querySelector(".comment-input-field textarea");

    textarea.addEventListener("input", () => {
        autoResizeTextarea(textarea);

    document.querySelector(".comment-input-field textarea".addEventListener("focusin", () => {
        autoResizeTextarea(textarea);
        document.querySelector(".comment-button-holder").classList.remove("d-none");
        document.querySelector(".comment-button-holder").classList.add("d-flex");
    }));

        document.querySelector(".comment-input-field textarea".addEventListener("focusout", () => {
            document.querySelector(".comment-button-holder").classList.add("d-none");
            document.querySelector(".comment-button-holder").classList.remove("d-flex");
        }));

</script>

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const posts = document.querySelectorAll('.post');

            posts.forEach(post => {
                const postId = post.querySelector('.comment-submit-button').getAttribute('data-post-id');
                const postCommentCount = post.querySelector('.count-comment-number');
                const commentTextarea = post.querySelector('textarea');
                const postCommentButton = post.querySelector('.comment-submit-button');
                const commentSection = post.querySelector('.details-posted-comment');

                postCommentButton.addEventListener('click', function () {
                    if (commentTextarea.value.trim() !== '') {
                        // Increment the comment count
                        let currentCount = parseInt(postCommentCount.innerText);
                        currentCount++;
                        postCommentCount.innerText = currentCount;

                        // Create a new comment element and append it to the comment section
                        const newComment = document.createElement('div');
                        newComment.classList.add('posted-comment');
                        newComment.textContent = commentTextarea.value;
                        commentSection.appendChild(newComment);

                        // Clear the textarea
                        commentTextarea.value = '';
                    } else {
                        alert('Please write a comment before posting.');
                    }
                });
            });
        });
    </script>

<script>
    document.querySelectorAll('.btn-delete-post').forEach(b => b.addEventListener('click', (e) => {
        const postId = e.target.closest('.post').dataset.postId;

        fetch('/Post/DeletePost?postId=' + postId, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then((res) => {
            if (res.ok) {
                document.querySelector(`.post[data-post-id="${postId}"]`).remove();
                alert('Post deleted successfully!');
            } else {
                alert('Failed to delete the post.');
            }
        })
        .catch((error) => console.error(error));
    }));
</script>

<script>
    document.querySelectorAll('.btn-save-post').forEach(b => b.addEventListener('click', (e) => {
        const button = e.target.closest('.btn-save-post');
        const postId = button.dataset.postId;

        fetch('/Post/SavePost?postId=' + postId, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then((res) => {
            if (res.ok) {
                if (!button.classList.contains('saved')) {
                button.classList.add('saved');
                button.querySelector('.save-image').src = '/images/savedPost.png';
                }
                alert('Post saved successfully!');
            }
            else {
                alert('Failed to save the post.');
            }
        })
        .catch((error) => console.error(error));
    }));
</script>

<script>
    document.querySelectorAll('.btn-unsave-post').forEach(b => b.addEventListener('click', (e) => {
        const button = e.target.closest('.btn-unsave-post');
        const postId = button.dataset.postId;

        fetch('/Post/UnsavePost?postId=' + postId, {
            method: 'POST',
            headers: {
                "Content-Type": "application/json"
            }
        })
        .then((res) => {
            if (res.ok) {
                if (button.classList.contains('saved')) {
                button.classList.remove('saved');
                button.querySelector('.save-image').src = '/images/unsavedPost.png';
            }
            alert('Post unsaved successfully!');
            } else {
                alert('Failed to unsave the post.');
            }
        })
        .catch((error) => console.error(error));
    }));
</script>

}