@using SocialMedia.Web.Models.Post
@model CreatePostModel


@{
    ViewData["Title"] = "Create a new post";
}
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Create a new post</title>
    <style>
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background-color: #f8f9fa;
            margin: 0;
            padding: 0;
        }

        .create-post-page {
            max-width: 600px;
            margin: 50px auto;
            background: #fff;
            border-radius: 12px;
            box-shadow: 0 4px 10px rgba(0, 0, 0, 0.1);
            padding: 20px;
        }

        h1 {
            font-size: 24px;
            font-weight: bold;
            text-align: center;
            margin-bottom: 20px;
            color: #0056b3;
        }

        .post-form {
            display: flex;
            flex-direction: column;
            gap: 15px;
        }

        label {
            font-size: 16px;
            margin-bottom: 5px;
        }

        textarea, input[type="text"] {
            width: 100%;
            padding: 10px;
            font-size: 14px;
            border: 1px solid #ccc;
            border-radius: 8px;
            transition: border-color 0.3s ease;
        }

            textarea:focus, input:focus {
                border-color: #0056b3;
                outline: none;
            }

        #tag-input {
         }   

         .tags-input-wrapper { 
            width: 100%;
              flex-wrap: wrap;   
              align-items: center;   
              padding: 5px;   
              border: 1px solid #ccc;   
              border-radius: 8px;   
              gap: 5px;   
              background: #f8f9fa;   
          }   

          .tag {   
              background: #0056b3;   
              color: #fff;   
              padding: 5px 10px;   
              border-radius: 12px;   
              font-size: 14px;   
              display: inline-flex;   
              align-items: center;   
          } 

             .tag a { 
                 margin-left: 5px; 
                 color: #fff; 
                 text-decoration: none; 
                 font-weight: bold; 
                 cursor: pointer; 
             }

        .form-group {
            display: flex;
            flex-direction: column;
        }

        #imagePreviews {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
        }

        .image-container {
            position: relative;
            width: 80px;
            height: 80px;
            overflow: hidden;
            border-radius: 8px;
            border: 2px solid #ddd;
        }

            .image-container img {
                width: 100%;
                height: 100%;
                object-fit: cover;
            }

            .image-container button {
                position: absolute;
                top: -5px;
                right: -5px;
                background: #ff4d4d;
                border: none;
                color: white;
                font-size: 12px;
                border-radius: 50%;
                cursor: pointer;
                width: 20px;
                height: 20px;
                display: flex;
                align-items: center;
                justify-content: center;
                box-shadow: 0 2px 5px rgba(0, 0, 0, 0.2);
            }

        .submit-btn {
            background-color: #0056b3;
            color: white;
            padding: 10px 15px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            transition: background-color 0.3s ease;
            font-size: 16px;
            text-align: center;
        }

            .submit-btn:hover {
                background-color: #004494;
            }

        .text-danger {
            font-size: 12px;
            color: #e74c3c;
        }

        #imageCounter {
            font-size: 14px;
            color: #555;
        }


        /* .tags-input-wrapper {
            background: transparent;
            padding: 10px;
            border-radius: 4px;
            max-width: 400px;
            border: 1px solid #ccc
        }

            .tags-input-wrapper input {
                border: none;
                background: transparent;
                outline: none;
                width: 140px;
                margin-left: 8px;
            }

            .tags-input-wrapper .tag {
                display: inline-block;
                background-color: #fa0e7e;
                color: white;
                border-radius: 40px;
                padding: 0px 3px 0px 7px;
                margin-right: 5px;
                margin-bottom: 5px;
                box-shadow: 0 5px 15px -2px rgba(250, 14, 126, .7)
            }

                .tags-input-wrapper .tag a {
                    margin: 0 7px 3px;
                    display: inline-block;
                    cursor: pointer;
                } 
                */
    </style>
</head>
<body>
    <div class="create-post-page">
        <h1>Create a New Post</h1>
        <form asp-controller="Post" asp-action="CreateConfirm" method="post" enctype="multipart/form-data" class="post-form">
            <div class="form-group">
                <label asp-for="@Model.Description">Description</label>
                <textarea asp-for="@Model.Description" placeholder="Write your post here..."></textarea>
                <span asp-validation-for="@Model.Description" class="text-danger"></span>
            </div>
            <div class="form-group">
                <label asp-for="@Model.Tags">Tags</label>
                <input asp-for="@Model.Tags" id="tag-input"></input>
            </div>
            <div class="form-group">
                <label for="imageUpload">Add Images (up to 10)</label>
                <input type="file" id="imageUpload" name="Attachments" accept="image/*" multiple style="display: none;">
                <div id="imagePreviews" class="image-previews"></div>
                <button type="button" id="addImageBtn" class="submit-btn" style="margin-top: 10px;">Add Image</button>
                <div id="imageCounter">0/10 images added</div>
            </div>
            <button type="submit" class="submit-btn">Create Post</button>
        </form>
    </div>
    </body>
</html>

<script>
           
       let selectedFiles = [];

    document.getElementById('addImageBtn').addEventListener('click', function () {
        document.getElementById('imageUpload').click();
    });

    document.getElementById('imageUpload').addEventListener('change', function (event) {
        const files = Array.from(event.target.files);
        const imagePreviews = document.getElementById('imagePreviews');

        if (selectedFiles.length + files.length > 10) {
            alert('Можете да качите максимум 10 изображения.');
            return;
        }

        // Добавяне на новите файлове към масива
        files.forEach(file => {
            if (file.type.startsWith('image/')) {
                selectedFiles.push(file);
            }
        });

        // Обновяване на файловия вход
        updateFileInput();

        // Генериране на визуализации
        files.forEach((file, index) => {
            if (file.type.startsWith('image/')) {
                const reader = new FileReader();
                reader.onload = function (e) {
                    const container = document.createElement('div');
                    container.classList.add('image-container');

                    const img = document.createElement('img');
                    img.src = e.target.result;

                    const removeBtn = document.createElement('button');
                    removeBtn.innerHTML = '&times;';
                    removeBtn.addEventListener('click', function () {
                        // Премахване на файла от масива
                        const fileIndex = selectedFiles.findIndex(f => f.name === file.name);
                        if (fileIndex !== -1) {
                            selectedFiles.splice(fileIndex, 1);
                        }
                        // Премахване на визуализацията
                        container.remove();
                        // Обновяване на файловия вход и брояча
                        updateFileInput();
                        updateImageCounter();
                    });

                    container.appendChild(img);
                    container.appendChild(removeBtn);
                    imagePreviews.appendChild(container);
                    updateImageCounter();
                };
                reader.readAsDataURL(file);
            }
        });
    });

    // Функция за обновяване на файловия вход с всички избрани файлове
    function updateFileInput() {
        const dataTransfer = new DataTransfer();
        selectedFiles.forEach(file => dataTransfer.items.add(file));
        document.getElementById('imageUpload').files = dataTransfer.files;
    }

    // Останалия код (updateImageCounter) остава непроменен

    function updateImageCounter() {
        const imagePreviews = document.getElementById('imagePreviews');
        const imageCounter = document.getElementById('imageCounter');
        imageCounter.textContent = `${imagePreviews.querySelectorAll('img').length}/10 images added`;
    }

          (function(){

        "use strict"


        // Plugin Constructor
        var TagsInput = function(opts){
            this.options = Object.assign(TagsInput.defaults , opts);
            this.init();
        }

        // Initialize the plugin
        TagsInput.prototype.init = function(opts){
            this.options = opts ? Object.assign(this.options, opts) : this.options;

            if(this.initialized)
                this.destroy();

            if(!(this.orignal_input = document.getElementById(this.options.selector)) ){
                console.error("tags-input couldn't find an element with the specified ID");
                return this;
            }

            this.arr = [];
            this.wrapper = document.createElement('div');
            this.input = document.createElement('input');
            init(this);
            initEvents(this);

            this.initialized =  true;
            return this;
        }

        // Add Tags
        TagsInput.prototype.addTag = function(string){

            if(this.anyErrors(string))
                return ;

            this.arr.push(string);
            var tagInput = this;

            var tag = document.createElement('span');
            tag.className = this.options.tagClass;
            tag.innerText = string;

            var closeIcon = document.createElement('a');
            closeIcon.innerHTML = '&times;';

            // delete the tag when icon is clicked
            closeIcon.addEventListener('click' , function(e){
                e.preventDefault();
                var tag = this.parentNode;

                for(var i =0 ;i < tagInput.wrapper.childNodes.length ; i++){
                    if(tagInput.wrapper.childNodes[i] == tag)
                        tagInput.deleteTag(tag , i);
                }
            })


            tag.appendChild(closeIcon);
            this.wrapper.insertBefore(tag , this.input);
            this.orignal_input.value = this.arr.join(',');

            return this;
        }

        // Delete Tags
        TagsInput.prototype.deleteTag = function(tag , i){
            tag.remove();
            this.arr.splice( i , 1);
            this.orignal_input.value =  this.arr.join(',');
            return this;
        }

        // Make sure input string have no error with the plugin
        TagsInput.prototype.anyErrors = function(string){
            if( this.options.max != null && this.arr.length >= this.options.max ){
                console.log('max tags limit reached');
                return true;
            }

            if(!this.options.duplicate && this.arr.indexOf(string) != -1 ){
                console.log('duplicate found " '+string+' " ')
                return true;
            }

            return false;
        }

        // Add tags programmatically
        TagsInput.prototype.addData = function(array){
            var plugin = this;

            array.forEach(function(string){
                plugin.addTag(string);
            })
            return this;
        }

        // Get the Input String
        TagsInput.prototype.getInputString = function(){
            return this.arr.join(',');
        }


        // destroy the plugin
        TagsInput.prototype.destroy = function(){
            this.orignal_input.removeAttribute('hidden');

            delete this.orignal_input;
            var self = this;

            Object.keys(this).forEach(function(key){
                if(self[key] instanceof HTMLElement)
                    self[key].remove();

                if(key != 'options')
                    delete self[key];
            });

            this.initialized = false;
        }

        // Private function to initialize the tag input plugin
        function init(tags){
            tags.wrapper.append(tags.input);
            tags.wrapper.classList.add(tags.options.wrapperClass);
            tags.orignal_input.setAttribute('hidden' , 'true');
            tags.orignal_input.parentNode.insertBefore(tags.wrapper , tags.orignal_input);
        }

        // initialize the Events
        function initEvents(tags){
            tags.wrapper.addEventListener('click' ,function(){
                tags.input.focus();
            });


            tags.input.addEventListener('keydown' , function(e){
                var str = tags.input.value.trim();

                if( !!(~[9 , 13 , 188].indexOf( e.keyCode ))  )
                {
                    e.preventDefault();
                    tags.input.value = "";
                    if(str != "")
                        tags.addTag(str);
                }

            });
        }


        // Set All the Default Values
        TagsInput.defaults = {
            selector : '',
            wrapperClass : 'tags-input-wrapper',
            tagClass : 'tag',
            max : null,
            duplicate: false
        }

        window.TagsInput = TagsInput;

    })();

     var tagInput1 = new TagsInput({
                selector: 'tag-input',
                duplicate : false,
            });
</script>