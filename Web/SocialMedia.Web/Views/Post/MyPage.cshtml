@using SocialMedia.Areas.Identity.Data
@*
    For more information on enabling MVC for empty projects, visit https://go.microsoft.com/fwlink/?LinkID=397860
*@
@{
    var isAdmin = ViewData["IsAdmin"] != null && (bool)ViewData["IsTargetUserAdmin"];
}
@model SocialMediaUserServiceModel


<!DOCTYPE html>
<html>
<head>
    <title>My page</title>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <link rel="stylesheet" href="~/SocialMedia.styles.css" asp-append-version="true" />
    <link rel="stylesheet" href="~/css/site.css" asp-append-version="true" />
    <style>
        body {
        margin-left: 250px;
        font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
        display: flex;
        }

        profile-page-user-information {
        justify-content: center;
        display: flex;
        margin-top: 50px;
        flex: 1;
        padding: 20px;
        align-items: center;
        }

        .profile-header {
        margin-left: 250px;
        display: flex;
        align-items: center;
        margin-bottom: 50px;
        margin-top: 50px;
        }

        .profile-header .profile-pic {
        width: 100px;
        height: 100px;
        border-radius: 50%;
        background-color: #ddd;
        margin-right: 20px;
        border: solid #ddd 4px;
        }

        #admin{
        border: solid red;
        }

        .profile-header .profile-info {
        display: flex;
        flex-direction: column;
        }

        .profile-header .profile-info h1 {
        margin: 0;
        font-size: 24px;
        }

        .profile-header .profile-info .stats {
        margin: 10px 0;
        display: flex;
        gap: 20px;
        }

        .profile-header .profile-info .stats span {
        font-size: 18px;
        }

        .profile-header .profile-info button {
        padding: 10px 20px;
        background-color: #0095f6;
        color: #fff;
        border: none;
        border-radius: 5px;
        cursor: pointer;
        }

        .tabs {
        margin-left: 250px;
        display: flex;
        gap: 20px;
        border-bottom: 1px solid #ddd;
        align-items: center;
        }

        .tabs button {
        background: none;
        border: none;
        font-size: 16px;
        padding: 10px;
        cursor: pointer;
        display: flex;
        justify-content: center;
        align-items: center;
        }

        .tabs button.active {
        border-bottom: 2px solid #000;
        }

        .content-placeholder {
        text-align: center;
        margin-top: 50px;
        }

        .content-placeholder img {
        width: 80px;
        height: 80px;
        margin-bottom: 20px;
        }

        .tags {
        display: block;
        flex-direction: row;
        gap: 10px;
        margin-left: 2px;
        }

        .tags > * {
        color: #0000ff;
        font-size: 13px;
        }

        .taggedUsers {
        display: block;
        flex-direction: row;
        gap: 10px;
        margin-left: 2px;
        }

        .taggedUsers-text {
        color: #7C3DAA;
        font-size: 15px;
        }

        .btn-add-friend-request{
        background-color: lightblue;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 250px;
        height: 35px;
        width: 100px;
        margin-bottom: 30px;
        }

        .btn-remove-friend-request {
        background-color: lightcoral;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 250px;
        height: 35px;
        margin-bottom: 30px;
        }

        .btn-follow {
        background-color: lightblue;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 20px;
        height: 35px;
        width: 100px;
        margin-bottom: 30px;
        }

        .btn-unfollow {
        background-color: lightcoral;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 20px;
        height: 35px;
        width: 100px;
        margin-bottom: 30px;
        }

        .btn-block {
        background-color:indianred;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 20px;
        height: 35px;
        width: 100px;
        margin-bottom: 30px;
        }

        .btn-unblock {
        background-color: indianred;
        font-size: 15px;
        border-radius: 20px;
        margin-left: 20px;
        height: 35px;
        width: 100px;
        margin-bottom: 30px;
        }

        .btn-chat {
            background-color: cornflowerblue;
            font-size: 15px;
            border-radius: 20px;
            margin-left: 20px;
            height: 35px;
            width: 100px;
            margin-bottom: 30px;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            text-decoration: none;
            cursor: pointer;
            color:black;
        }
    </style>
</head>
<body>
    <div class="profile-page-user-information">
        <div class="profile-header">
            @if(isAdmin)
            {
                <img class="profile-pic" id="admin" src="@Model.ProfilePicture.CloudUrl"></img>
            }
            else
            {
                <img class="profile-pic" src="@Model.ProfilePicture.CloudUrl"></img>
            }
            <div class="profile-info">
                <h1>@Model.UserName</h1>
                <div class="stats">
                    <span>@Model.Posts.Where(p => p.DeletedOn == null).Count() posts</span>
                    @if (!Model.IsPrivate || (bool)ViewData["IsOwner"] || (bool)ViewData["AreFriends"])
                    {
                        <a class="links" asp-controller="Post"
                        asp-action="PeopleVisualization"
                        asp-route-userId="@Model.Id"
                        asp-route-type="friends">
                            <span>@Model.Friends.Count Friends</span>
                        </a>
                    }
                    else
                    {
                        <span>@Model.Friends.Count Friends</span>
                    }


                    @if(!Model.IsPrivate)
                    {
                        <a class="links" asp-controller="Post"
                        asp-action="PeopleVisualization"
                        asp-route-userId="@Model.Id"
                        asp-route-type="followers">
                            <span>@Model.Followers.Count Followers</span>   
                        </a>
                    }
                    @if (!Model.IsPrivate || (bool)ViewData["IsOwner"] || (bool)ViewData["AreFriends"])
                    {
                        <a class="links" asp-controller="Post"
                        asp-action="PeopleVisualization"
                        asp-route-userId="@Model.Id"
                        asp-route-type="following">
                            <span>@Model.Following.Count Following</span>
                        </a>
                    }
                    else
                    {
                        <span>@Model.Following.Count Following</span>
                    }
                </div>
            </div>
        </div>
        @if (TempData["ErrorMessage"] != null)
        {
            <div class="alert alert-danger">
                @TempData["ErrorMessage"]
            </div>
        }
        @if (!(bool)ViewData["IsCurrentUserBlocked"])
        {
            if(!(bool)ViewData["IsOwner"])
            {
                if (!(bool)ViewData["AreFriends"])
                {
                    <button class="btn-add-friend-request" id="@Model.Id">Add friend</button>
                    if (!(bool)ViewData["IsFollowing"] && !Model.IsPrivate)
                    {
                        <button class="btn-follow" id="@Model.Id">Follow</button>
                    }
                    else if ((bool)ViewData["IsFollowing"])
                    {
                        <button class="btn-unfollow" id="@Model.Id">Unfollow</button>
                    }

                }
                else
                {
                    <button class="btn-remove-friend-request" id="@Model.Id">Remove friend</button>
                }
                @if (!(bool)ViewData["IsCurrentUserHaveBlockedTargetUser"] && !(bool)ViewData["IsOwner"])
                {
                    <button class="btn-block" id="@Model.Id">Block</button>
                }
                @if ((bool)ViewData["IsCurrentUserHaveBlockedTargetUser"] && !(bool)ViewData["IsOwner"])
                {
                    <button class="btn-unblock" id="@Model.Id">Unblock</button>
                }
                @if(Model.IsPrivate && (bool)ViewData["AreFriends"] || !Model.IsPrivate)
                {
                    <a class="btn-chat" asp-controller="Chat"
                       asp-action="Conversation"
                       asp-route-userId="@Model.Id"
                       asp-route-type="userId">
                       <span> Chat</span> 
                    </a>
                }
               
            }
           
            <div class="tabs">
                <button class="load-content" data-url="@Url.Action("LoadPartial", "Post", new { type = "MyPosts", id = Model.Id })">Posts</button>
                <button class="load-content" data-url="@Url.Action("LoadPartial", "Post", new { type = "TaggedPosts", id = Model.Id })">Tagged posts</button>
                @if ((bool)ViewData["IsOwner"])
                {
                    <button class="load-content" data-url="@Url.Action("LoadPartial", "Post", new { type = "DeletedPosts", id = Model.Id })">Deleted posts</button>
                    <button class="load-content" data-url="@Url.Action("LoadPartial", "Post", new { type = "SavedPosts", id = Model.Id })">Saved posts</button>
                }
            </div>

            <div id="partialContainer">
            </div>
        }
        else
        {
            <h3>You cannot see this account</h3>
        }
    </div>
    </body>
    </html>

@section Scripts {
    <script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
    <script>
        $(document).ready(function () {
            $(".load-content").click(function (event) {
                event.preventDefault();

                var url = $(this).data("url");

                $.get(url, function (data) {
                    $("#partialContainer").html(data);

                    document.querySelectorAll('.post').forEach(post => {
                        initializePostFeatures(post);
                        initializeImages();
                    });
                });
            });
        });
    </script>
    <script>
          document.querySelector('.btn-add-friend-request').addEventListener('click', (e) => {
            var friendId = e.target.id;

            fetch('/Home/SentFriendRequest?friendId=' + friendId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You have successfully sent a friend request!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
    <script>
          document.querySelector('.btn-remove-friend-request').addEventListener('click', (e) => {
            var friendId = e.target.id;

            fetch('/Home/RemoveFriend?friendId=' + friendId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You have successfully removed the user from your friends!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
    <script>
          document.querySelector('.btn-follow').addEventListener('click', (e) => {
            var followingId = e.target.id;

            fetch('/Home/Follow?followingId=' + followingId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You successfully followed the user!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
    <script>
          document.querySelector('.btn-unfollow').addEventListener('click', (e) => {
            var unfollowingId = e.target.id;

            fetch('/Home/Unfollow?unfollowingId=' + unfollowingId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You successfully unfollowed the user!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
    <script>
          document.querySelector('.btn-block').addEventListener('click', (e) => {
            var blockingId = e.target.id;

            fetch('/Home/Block?blockingId=' + blockingId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You successfully blocked the user!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
    <script>
          document.querySelector('.btn-unblock').addEventListener('click', (e) => {
            var unblockingId = e.target.id;

            fetch('/Home/Unblock?unblockingId=' + unblockingId, {
                method: 'POST',
                headers: {
                    "Content-Type": "application/json"
                }
            })
            .then((res) => {
                if (res.ok) {
                    alert('You successfully unblocked the user!');
                    window.location.reload();
                } else {
                    return res.text();
                }
            })
            .then((errorMessage) => {
                if (errorMessage) {
                    alert(errorMessage);
                }
            })
            .catch((error) => console.error(error));
        });
    </script>
}

